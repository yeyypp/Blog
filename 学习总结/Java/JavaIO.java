public class Main {
    /**
     * 流可以看作是数据的序列
     */


    /**
     * 直接io，缓冲io
     * 缓冲io
     * 在内核中维护一个缓冲区，无论用户读取的数据多小，都从磁盘中加载一段数据到缓冲区中，下次可以直接从缓冲区中读取
     * 可以减少磁盘读取的次数
     *
     *  1.用户调用read方法
     *
     * 2. 调用系统调用，触发中断，进程从用户态进入内核态
     *
     * 3. 从硬盘中读取数据并复制到kernel缓冲区
     *
     * 4. 将数据从kernel缓存区复制到用户提供的byte数组中
     *
     * 5. 进程从内核态返回到用户态
     *
     * 直接io
     * 从磁盘直接读入数据
     */

    /**
     * 当直接使用inputstream.close时socket也会关闭
     * 用shutinputstram关闭流
     */

    /**
     * 传统bio
     * 一个线程负责一个连接，采用线程池，复用线程
     * 但线程之间的切换对于操作系统来说是昂贵的，因为需要保存现在线程的状态，再切换到另一个线程
     *
     * 代理 代理的对象是客户端 反向代理 代理的对象是服务器
     */

    /**
     * java nio
     * 普通io 面向流，单向，阻塞
     * nio 面向通道与缓冲，通道是双向的，既可以读也可以写，可以非阻塞
     *
     * 内存映射文件
     * 内存映射文件是一种允许Java程序直接从内存访问的特殊文件。
     * 通过将整个文件或者文件的一部分映射到内存中、操作系统负责获取页面请求和写入文件，应用程序就只需要处理内存数据，这样可以实现非常快速的IO操作。
     */
}