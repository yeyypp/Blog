public class Main {

    /**
     * Java三大特性
     * 继承 多态 封装
     * 封装：
     * 把对象的属性及内部实现包围起来，对数据的访问只能通过定义的接口，可以使程序更容易理解和维护，控制用户对类的修改和访问
     * 继承：
     * 从已有的类中派生新的类，并扩展新的能力，使得可以复用代码，减少开发成本，但需注意可能会增加耦合性。java中类只能单继承
     * 但可以实现多个接口，而接口可以继承多个接口
     * 多态：
     * 是同一个行为具有不同表现形式或形态的能力，在java中实现多态需要继承，重写，父类引用指向子类引用
     * 好处是可以减少耦合，使用灵活
     */

    /**
     * java基本类型有哪些
     * boolean 1位
     * byte 8位
     * char 16位
     * short 16位 最大存储容量2的16次方减1   范围-128~127
     * int 32位 最大2的32次方减1  范围-2的31次方到2的31次方减1
     * float 32位 赋值时需要在后边加上f或F
     * long 64 位
     * double 64位
     * 将"大"数据转换为"小"数据时，你可以使用强制类型转换。即你必须采用下面这种语句格式： int n=(int)3.14159/2;
     */

    /**
     * 自动装箱拆箱
     * 就是自动将原始类型的值转换成对象
     * int变量转换成Integer对象为装箱，反之拆箱
     * 发生在赋值时
     * Integer tem = 3; //装箱
     * int a = tem; // 拆箱
     * 发生在方法调用时
     * show(Integer tem),当调用show（3）时，自动装箱
     *
     * 弊端
     * 自动装箱在循环中可能会创建过多的对象
     *
     * 当在方法的重载时出现类似test(int tem) test(Integer tem)不会出现自动装箱的过程
     *
     * 需要注意的问题：
     * 1.需要注意使用时JVM缓存了-128-127的对象，所以当
     * Integer a = 125; Integer b = 125 a == b 会返回true 因为两者比的是同一对象
     * 而超出127后就会返回false 因为是两个不同的对象
     * 同时应注意一般比较包装类时应该使用equals
     *
     * 2.在使用包装类但没有赋值时，会在拆箱时出现nullpointerException
     */

    /**
     * 泛型
     * 泛型指的是参数化类型，在具体使用时再传入具体的类型，泛型只在编译阶段有效，在运行时会进行去泛型
     * 使用方法有三种
     * 泛型类：
     * 例如容器类，pulibc class MyClass<T> {}
     * 泛型接口：
     * 与类相似
     * 泛型方法：
     * 需要在方法声明处加入泛型的声明
     * private static <T> Set<T> union(Set<T> s1, Set<T> s2) {
     *     Set result = new HashSet<>();
     *     result.add(s1);
     *     result.add(s2);
     *     return result;
     * }
     */
}