public class Main {
    /**
     * MVC
     * 将整个web分成三个模块，将Web层进行指责解耦
     * 模型，视图，控制器
     * 模型就是java ben 或者dao， 视图就是jsp，控制器就是controller负责把模型传递到视图中
     * 通过视图解析器
     */


    /**
     * @PathVariable 和 @RequestParam 区别
     * 都是从request中取出参数
     *  RequestParm从请求中取得参数
     *  如：http://localhost:8080/springmvc/hello/101?param1=10&param2=20
     *  public String getDetails(
     *     @RequestParam(value="param1", required=true) String param1,
     *         @RequestParam(value="param2", required=false) String param2)
     *
     * PathVariable
     * 从URI模板中取得
     * 如：http://localhost:8080/springmvc/hello/101?param1=10&param2=20
     * @RequestMapping("/hello/{id}")
     *     public String getDetails(@PathVariable(value="id") String id,
     *     @RequestParam(value="param1", required=true) String param1,
     *     @RequestParam(value="param2", required=false) String param2)
     */

    /**
     * forward转发 redirect重定向
     * 转发：
     * 发生在服务器端，服务器直接访问目标地址，再把内容返回给客户端，客户端的地址栏不会变
     * 会将相同的request转发到目标地址
     *
     * 重定向：
     * 会返回一个302状态码，和一个新的地址，客户端再访问新的地址，发起新的请求
     */

    /**
     *Spring MVC是一个基于MVC架构的用来简化web应用程序开发的应用开发框架，它是Spring的一个模块,
     * web模型中，通过把Model，View，Controller分离，把较为复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错
     *
     * （1）用户发送请求至前端控制器DispatcherServlet；
     * （2） DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle；
     * （3）处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet；
     * （4）DispatcherServlet通过HandlerAdapter处理器适配器调用处理器；
     * （5）执行处理器(Handler，也叫后端控制器)；
     * （6）Handler执行完成返回ModelAndView；
     * （7）HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet；
     * （8）DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析；
     * （9）ViewResolver解析后返回具体View；
     * （10）DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）
     * （11）DispatcherServlet响应用户。
     *
     *
     */
}