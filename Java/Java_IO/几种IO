public class Main {
    /**
     * 缓存io
     * 缓存I/O又被称作标准I/O
     * 在读操作时，会先检查操作系统内核缓冲区是否有数据，有则直接返回，没有则从磁盘读取
     * 写操作时，会将数据从用户空间复制到内核空间，再由操作系统复制到用户空间
     *
     * 直接io
     * 读数据时会直接到磁盘中读取数据，不会经理缓存
     * 如果应用程序缓存中没有数据，则每次都会到磁盘中读取数据，造成很大开销
     */



    /**
     * bio nio aio
     * 阻塞非阻塞是指程序等待函数调用结果时的状态， 阻塞，则结果返回前线程会挂起，非阻塞，则线程不会挂起。
     * 同步非同步指程序调用后是否主动等待结果，同步，在结果返回前，调用不会返回，异步是调用返回，被调用者通知调用者
     */

    /**
     * 当执行socket.accept read write函数时可能会阻塞，当用多线程处理时，可以充分利用cpu资源
     *
     * 单线程io
     * 服务器一次处理一个客户端链接，服务器在调用accept，read，write时阻塞，
     * 对于多个客户端访问必须等到前一个访问结束
     *
     * 多线程阻塞io
     * 虽然可以处理多个链接，但线程的创建和销毁成本很高,线程本身占用较大内存,仍会消耗很大资源
     *
     * 单线程nio
     * 是指在调用write，read函数时，若没有找到数据，则直接返回0，不会阻塞，将这个事件在selector上记下来，
     * 每个Channel对应一个socket连接
     * 当selector调用select时，会查找哪个客户端准备好了数据，如果有就绪的，则执行事件，
     * 异步 IO 在两个阶段都完成以后才发送信号，数据是直接可用的。
     *
     *
     *
     *
     *
     */



}