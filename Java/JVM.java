public class Main {
    /**
     * 类加载过程
     * 加载 验证 准备 解析 初始化
     * 类加载过程主要是将Class文件加载到虚拟机内存中
     *
     * 加载：通过类的全限定名获得类的二进制字节流，类的信息存放到方法区，在堆中生成类的对象
     * 验证：通过文件格式，元数据，字节码，符号引用四种验证，保证class文件中的二进制信息符合虚拟机规范
     * 准备：会为类变量分配内存设置初始值，数据类型默认的0值
     * 解析：将常量池中的符号引用替换为直接引用
     * 初始化：根据类中所写的程序代码，初始化类变量及其他资源。
     */

    /**
     * JVM在执行java程序时会把其管理的区域分成几个不同的区域
     * 线程共有
     * 堆，方法区
     * 堆中存放着对象实例
     * 方法区中存放类的具体信息，及常量
     *
     * 线程独有的
     * 虚拟机栈，本地方法栈，程序计数器
     * 程序计数器记录当前线程字节码执行的行号
     * 虚拟机栈
     * 存放局部变量表，方法出口等信息
     * 本地方法栈
     * 存放native方法
     *
     *  垃圾收集，判断
     * 引用计数法，根搜索法判断对象
     * 以某个对象为root，向下搜索，如果能到达，说明不是垃圾
     *
     * 收集法
     * 标记清楚，先标记不需要的对象，然后统一清楚，会造成大量内存碎片
     * 标记整理，标记出不需要的对象，将其移动到一端，再统一整理
     * 复制算法，将内存分为两块，使用其中一块，将其中活着的对象复制到另一块中，再统一清理
     * 分代收集
     *
     *
     * 堆是垃圾收集的主要区域
     * 一般将堆分为新生代，老年代
     * 新生代eden，s0,s1
     * 新生代对象一般是朝生幕死，采用复制算法，经过将活着的对象复制到s0，
     * 老年代采用标记清楚法
     *
     */








}