public class Main {
/**
 * 当一个对象发生改变时，所有依赖于他的对象收到通知，并自动更新
 */

public class Subject{
    private List<Observer> observerList = new LinkedList<>();
    private int state;

    public int getState() {
        return state;
    }

    public void setState(int newState) {
        this.state = newState;
        notifyAllObserver();
    }

    public void attach(Observer observer) {
        observerList,add(observer);
    }

    public void notifyAllObserver() {
        for (Observer o : observerList) {
            o.update();
        }
    }
}

public interface Observer {
    public void update();
}

public class Observer1 implements Observer {
    Subject subject;

    public Observer1(Subject subject) {
        this.subject = subject;
        this.subject.attach(this);
    }

    @java.lang.Override
    public void update() {
        System.out.print(subject.getState())
    }
}

public class Main {
    Subject subject = new Subject()
}
}